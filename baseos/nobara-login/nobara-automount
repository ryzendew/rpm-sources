#!/bin/bash

# Check if the user is not 'liveuser'
if [[ $USER != "liveuser" ]]; then

  # If user is part of wheel(admin) group, re-execute script as root so that we can mount.
  # We pass $USER to the script as $1 so that we can mount using the user's /run/media/$USER path
  # and give the user ownership/control over the mounted partition.
  # This is used alongside a polkit rule /usr/share/polkit-1/actions/org.nobaraproject.automount.policy
  if [[ $EUID != 0 ]]; then
    # Don't attempt to mount anything if user is not part of the wheel(admin) group:
    if [[ -z $(groups $USER | grep wheel) ]]; then
      echo "User $USER is not in wheel group. Non-admin users cannot mount drives. Exiting."
      exit 0
    fi

    exec pkexec "$(realpath $0)" "$USER"
    exit 0
  fi

  # Cleanup any previous mount points
  while IFS= read -r mountpoint; do
    if [[ -z $(lsblk | awk '{ print $7 }' | grep $mountpoint) ]]; then
      # Make sure directory is empty (it should be if nothing is mounted to it)
      if [ -z "$(ls -A /run/media/$2/$mountpoint)" ]; then
        rm -Rf /run/media/$2/$mountpoint
      fi
    fi
  done < <( ls /run/media/$2/ ) # list all partitions with lsblk

  while IFS= read -r partition; do
      # get all partitions that are not mounted. column 4 lists active mountpoints, ignore everything without UUID
      if [ "$(echo $partition | awk '{ print $4 }')" == "" ] && [ "$(echo $partition | awk '{ print $2 }')" != "" ]; then
              # for all partitions without a mountpoint get partition name, device path, and filesystem type
        partition_name="$(echo $partition | awk '{ print $2 }')"
        tomount="/dev/disk/by-uuid/$partition_name"
        filesystem="$(echo $partition | awk '{ print $3 }')"
        # if the filesystem type isn't a lux partition, attempt to automount it
        if [[ "$filesystem" != "crypto_LUKS" ]]; then
          mountopts=""
          ownershipcomm=""
          rwuser="$1"
          # make sure the filesystem type isn't blank or empty
          if [[ "$filesystem" != "" ]]; then

              # Setup ownership and mount options for non-windows partitions
              if [[ "$filesystem" == "btrfs" ]] || [[ "$filesystem" == "ext4" ]] || [[ "$filesystem" == "ext3" ]] || [[ "$filesystem" == "ext2" ]] || [[ "$filesystem" == "xfs" ]]; then
                ownershipcomm="sudo chown $rwuser:$rwuser /run/media/$rwuser/$partition_name"
              else
                mountopts="-o umask=000"
              fi

              # Only attempt to mount with ownership and mount options if the partition has been enabled for automounting
              if [[ -f /etc/nobara/automount/enabled.conf ]]; then
                if [[ -n $(grep $partition_name /etc/nobara/automount/enabled.conf) ]]; then
                  # Make the directory to mount to
                  sudo mkdir -p /run/media/$rwuser/$partition_name
                  # Prevent ntfs metadata mount failure
                  if [[ "$filesystem" == "ntfs" ]]; then
                    sudo ntfsfix $tomount &>/dev/null
                  fi
                  # Mount the partition to the directory
                  sudo mount -t $filesystem $mountopts $tomount /run/media/$rwuser/$partition_name
                  # Set ownership if needed
                  $ownershipcomm
                  # We only need to echo the command for debugging purposes.
                  # echo "sudo mount -t $filesystem $mountopts $tomount /run/media/$rwuser/$partition_name"
                fi
              fi

          fi
        fi
      fi
  done < <( lsblk -rno TYPE,UUID,FSTYPE,MOUNTPOINT | grep part ) # list all partitions with lsblk

fi
